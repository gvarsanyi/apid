// Generated by CoffeeScript 1.7.1
var exposed_api, jot, remote_api,
  __slice = [].slice;

jot = require('json-over-tcp');

exposed_api = require('./exposed-api');

remote_api = require('./remote-api');

module.exports.start = function(port, callback) {
  var cleaned_up, event, server, _fn, _i, _len, _ref;
  cleaned_up = false;
  _ref = ['SIGINT', 'SIGTERM', 'SIGHUP', 'SIGBREAK', 'exit', 'uncaughtException'];
  _fn = function(event) {
    return process.on(event, function() {
      var args, fs;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      console.log.apply(console, ['Event:', event].concat(__slice.call(args)));
      if (!(cleaned_up || port > 1)) {
        console.log('unlinking', port);
        try {
          fs = require('fs');
          fs.unlink(port);
          cleaned_up = true;
        } catch (_error) {}
      }
      if (event !== 'exit') {
        return process.exit(0);
      }
    });
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    event = _ref[_i];
    _fn(event);
  }
  server = jot.createServer(port);
  server.on('listening', function() {
    console.log('server listening on:', port);
    return typeof callback === "function" ? callback() : void 0;
  });
  server.on('connection', function(socket) {
    var client_api, client_session;
    client_api = {};
    client_session = {};
    exposed_api.reveal(socket);
    return socket.on('data', function(data) {
      console.log('data', data);
      if (data.api) {
        remote_api.attach(data, socket, client_api, client_session);
        return socket.write({
          ack: 1
        });
      } else if (data.req) {
        return exposed_api.request(data.req, socket, client_api, client_session);
      } else {
        return remote_api.response(data != null ? data.res : void 0);
      }
    });
  });
  return server.listen(port);
};
